{"chunk_id": "test.md_1", "chunk_content": "<img src=\"https://www.runoob.com/wp-content/uploads/2013/11/python.jpg\">\n<center>图 1 Python Logo</center>", "metadata": {"chunk_type": "image", "titles": ["1 Python 简介"], "chunk_summary": "图片显示的是Python编程语言的Logo，它由两个相互环绕的蛇形图案组成。", "file_id": "test.md", "file_summary": "Python 编程语言以其优雅、易懂的语法和高效的开发效率而著称，尤其适用于原型设计和小任务。其设计哲学强调美观、明确和可读性，并遵循实用性有时胜过纯粹性的原则。Python 支持多种数据类型，提供面向对象编程、模块化组织、异常处理等特性，并自动管理内存，简化开发流程。Python 团队持续发布新版本，例如 2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本，以及 2023 年 8 月发布的 Python 3.9、3.10、3.11 和 3.12 系列版本，表明其持续更新和维护。Python 拥有庞大的标准库，易于扩展和跨平台运行，并可嵌入软件系统。"}}
{"chunk_id": "test.md_2", "chunk_content": "- 优雅的语法，编写和阅读都很简单；\n- 简单好用，轻松写程序。这个特点让 Python 做以下工作很方便：开发一个原型或其他特定的小任务，而不用太费劲维护；\n- 内置庞大的标准库，包含常见的编程任务，比如连接网页服务器，用正则表达式搜索文本，读写文件；\n- Python 交互模式可以轻松测试代码片段，也可以使用 IDLE 的集成开发环境；\n- 也可以轻松扩展用 C 或 C++ 编译出来的新模块；\n- 可以嵌入软件系统来提供编程接口；\n- 跨平台运行，包括 MacOS X，Windows，Linux 和 Unix，在安卓和 iOS 上也有非官方实现。", "metadata": {"chunk_type": "text", "titles": ["1 Python 简介", "1.1 Python 的特点"], "chunk_summary": "Python 语法优雅易懂，开发效率高，适合原型设计和小任务。它拥有庞大的标准库，提供便捷的编程功能，并支持交互模式和集成开发环境。Python 易于扩展，可嵌入软件系统，且跨平台运行。\n", "file_id": "test.md", "file_summary": "Python 编程语言以其优雅、易懂的语法和高效的开发效率而著称，尤其适用于原型设计和小任务。其设计哲学强调美观、明确和可读性，并遵循实用性有时胜过纯粹性的原则。Python 支持多种数据类型，提供面向对象编程、模块化组织、异常处理等特性，并自动管理内存，简化开发流程。Python 团队持续发布新版本，例如 2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本，以及 2023 年 8 月发布的 Python 3.9、3.10、3.11 和 3.12 系列版本，表明其持续更新和维护。Python 拥有庞大的标准库，易于扩展和跨平台运行，并可嵌入软件系统。"}}
{"chunk_id": "test.md_3", "chunk_content": "- 多样的数据类型：数（浮点数、复数和无限长整数），字符串（ASCII 和 Unicode）及字典；\n- Python 通过类和多重继承来支持面向对象编程；\n- 代码可以用模块和包来组织；\n- 支持抛出和捕捉异常，用于干净的错误处理；\n- 数据是强类型、动态类型，不兼容数据操作会抛出异常（比如试图把字符串和数字加起来），这样能马上发现错误；\n- 包含生成器（generators）和列表操作（list comprehesions）这样的高级特性；\n- 自动管理内存，避免你在自己的代码里费心申请释放内存。", "metadata": {"chunk_type": "text", "titles": ["1 Python 简介", "1.2 Python 的编程语言特性"], "chunk_summary": "Python 支持多种数据类型，包括数字、字符串和字典，并提供面向对象编程、模块化组织、异常处理、强类型动态类型检查、生成器和列表操作等特性。它还自动管理内存，简化开发过程。", "file_id": "test.md", "file_summary": "Python 编程语言以其优雅、易懂的语法和高效的开发效率而著称，尤其适用于原型设计和小任务。其设计哲学强调美观、明确和可读性，并遵循实用性有时胜过纯粹性的原则。Python 支持多种数据类型，提供面向对象编程、模块化组织、异常处理等特性，并自动管理内存，简化开发流程。Python 团队持续发布新版本，例如 2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本，以及 2023 年 8 月发布的 Python 3.9、3.10、3.11 和 3.12 系列版本，表明其持续更新和维护。Python 拥有庞大的标准库，易于扩展和跨平台运行，并可嵌入软件系统。"}}
{"chunk_id": "test.md_4", "chunk_content": "Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than _right_ now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!", "metadata": {"chunk_type": "text", "titles": ["2 Python 之禅"], "chunk_summary": "优先选择美观、明确、简单、易于理解和可读性高的方案。避免打破规则，但实用性有时胜过纯粹性。错误不应被忽略，除非明确允许。面对歧义时，避免猜测，并应存在一种明显的方法。现在总是比永不更好，但永不有时比现在更好。难以解释的实现是糟糕的主意，易于解释的实现可能不错。应更多地采用命名空间。\n", "file_id": "test.md", "file_summary": "Python 编程语言以其优雅、易懂的语法和高效的开发效率而著称，尤其适用于原型设计和小任务。其设计哲学强调美观、明确和可读性，并遵循实用性有时胜过纯粹性的原则。Python 支持多种数据类型，提供面向对象编程、模块化组织、异常处理等特性，并自动管理内存，简化开发流程。Python 团队持续发布新版本，例如 2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本，以及 2023 年 8 月发布的 Python 3.9、3.10、3.11 和 3.12 系列版本，表明其持续更新和维护。Python 拥有庞大的标准库，易于扩展和跨平台运行，并可嵌入软件系统。"}}
{"chunk_id": "test.md_5", "chunk_content": "<center>表 1 Python 的发版历史（部分）</center>\n<table><tr><td>发布版本</td><td>发布日期</td></tr><tr><td>Python 3.12.0</td><td>2023 年 10 月 2 日</td></tr><tr><td>Python 3.11.6</td><td>2023 年 10 月 2 日</td></tr><tr><td>Python 3.11.5</td><td>2023 年 8 月 24 日</td></tr><tr><td>Python 3.10.13</td><td>2023 年 8 月 24 日</td></tr><tr><td>Python 3.9.18</td><td>2023 年 8 月 24 日</td></tr></table>", "metadata": {"chunk_type": "table", "titles": ["3 Python 的发版历史"], "chunk_summary": "Python 的发版历史表明，2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本。在 2023 年 8 月 24 日，分别发布了 Python 3.11.5、Python 3.10.13 和 Python 3.9.18 版本。这表明 Python 团队在 2023 年 8 月和 10 月发布了多个版本，涵盖了 Python 3.9、3.10、3.11 和 3.12 系列。", "file_id": "test.md", "file_summary": "Python 编程语言以其优雅、易懂的语法和高效的开发效率而著称，尤其适用于原型设计和小任务。其设计哲学强调美观、明确和可读性，并遵循实用性有时胜过纯粹性的原则。Python 支持多种数据类型，提供面向对象编程、模块化组织、异常处理等特性，并自动管理内存，简化开发流程。Python 团队持续发布新版本，例如 2023 年 10 月 2 日同时发布了 Python 3.12.0 和 Python 3.11.6 版本，以及 2023 年 8 月发布的 Python 3.9、3.10、3.11 和 3.12 系列版本，表明其持续更新和维护。Python 拥有庞大的标准库，易于扩展和跨平台运行，并可嵌入软件系统。"}}
